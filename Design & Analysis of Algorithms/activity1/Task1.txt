"""
Design an algorithm for the maxima point problem (as discussed in class) 
for a point in 3-D space i.e. a point having its x, y & z components. 

"""

########################### solved by geometric approach  ################################
"""
Input: A set of points in 3D space with x, y, and z components.
Output: List of local maxima points.

Procedure:
Sort the points based on x coordinates in ascending order
A stack will store the maxima points
(Stack is more efficient because we dont need to randomly access our point indexes)

As soon as the point Pi is dominated by Pj, we do not need Pi point, because Pi can never be a maxima point.
A vertical plane is sweeped across the 3D space along vertical plane
when it reaches the rightmost point

O(nlogn) time complexity
O(n) for sorting  + O(n) outer loop  + O(n) inner loop

##code in task 2 file
"""

DRY RUN:
sorted points on x coordinate:
[(2, 1, 10), (3, 4, 9), (4, 7, 2), (6, 1, 3), (10, 2, 5), (12, 5, 8), (21, 3, 6)]

check the inner loop:
while s.is_not_empty() and s.top().y <= points[i].y and s.top().z <= points[i].z:
    s.pop()
s.push(points[i])

STACK TRACE:
i = 0:                         i = 1:
p = (2, 1, 10)                 p = (3, 4, 9)
stack:                         stack: condition is false so we push
[ (2, 1, 10) ]                 [ (3, 4, 9) ]
                               [ (2, 1, 10) ] 


i = 2:                          i = 3:
p = (4, 7, 2)                  p = (6, 1, 3)
condition is false             condition is false
stack:                         stack: 
[ (4, 7, 2) ]                  [ (6, 1, 3) ]
[ (3, 4, 9) ]                  [ (4, 7, 2) ]          
[ (2, 1, 10) ]                 [ (3, 4, 9) ]
                               [ (2, 1, 10) ]  


i = 4:                          i = 5:
p = (10, 2, 5)                  p = (12, 5, 8)
condition is true so pop        condition is true so pop
stack:                          stack:
[    ]                          [    ]
[ (10, 2, 5) ]                  [ (12, 5, 8) ]    
[ (4, 7, 2) ]                   [ (4, 7, 2) ]     
[ (3, 4, 9) ]                   [ (3, 4, 9) ]
[ (2, 1, 10) ]                  [ (2, 1, 10) ]  
                            

i = 6:                          
p = (21, 3, 6)                  
condition is false        
stack:                   
[ (21, 3, 6) ]             
[ (12, 5, 8) ]          
[ (4, 7, 2) ]           
[ (3, 4, 9) ]            
[ (2, 1, 10) ]                                     

final maximal points: 
(2, 1, 10), (3, 4, 9), (4, 7, 2), (12, 5, 8), (21, 3, 6)

