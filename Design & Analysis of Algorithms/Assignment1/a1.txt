HAFSAH SHAHBAZ
251684784
COMP303-B
----------------

Part A: Design an algorithm to add 3 (+3 units) in all even numbers and to add 2 (+2 units)
in all odd indices in the first 1/5th elements of the given n integer list.
-----------------------------------------------------------------------------------------------
BRUTE FORCE:
alter(Arr[1.....n], n)

  fifth = n / 5
  for i: 1.....fifth
    if Arr[i] mod 2 == 0
        Arr[i] =  Arr[i] + 3
    if i mod 2 == 1
        Arr[i] = Arr[i] + 2

-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:                               recurrence relation: T(n) = T(n/2) + T(n/2) +  1
                                                                            =  2T(n/2) + 1
void alter(Arr[1.....n], p, r)                             
  if p==r
    if Arr[p] mod 2 == 0
        Arr[p] =  Arr[p] + 3
    if p mod 2 == 1
        Arr[p] = Arr[p] + 2
  else
    mid = floor((p + r)/2)
    alter(Arr[1..n], p, mid)
    alter(Arr[1..n], mid+1, r)

fifth = floor((start + end)/ 5)
function call <--- alter(Arr[1..n], start, fifth)

##############################################################################################

Part B: Design an algorithm to take sum of ‘n’ integers given that we want our linear
structure (list/array) to be divided into three parts instead of two parts at each recursive
step. You need to change the base condition(s) carefully
-----------------------------------------------------------------------------------------------
BRUTE FORCE:
returnValue calcSum(Temp[1...n])
for i: 1......n
  total = total + Temp[i]
return total

-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:
returnValue calcSum (Temp[1...n], p, r )
                                                recurrence relation: T(n) = T(n/3) + T(n/3) + T(n/3) +  1
                                                                          =  3T(n/3) + 1
  if (p==r)
    return Temp[r]      
  else if (p== r-1)
    return Temp[r] + Temp[p]
  
  else

  mid1 = floor (( p + (r-p) )/3)      
  mid2 = floor (( p + 2 * (r-p) )/3)     

  chunk1 <-- calcSum(Temp,p,mid1)
  chunk2 <-- calcSum(Temp,mid1+1,mid2)
  chunk3 <-- calcSum(Temp,mid2+1,r)

  return chunk1+chunk2+chunk3

-----------------------------------------------------------------------------------------------