HAFSAH SHAHBAZ
251684784
COMP303-B
----------------

Part A: Design an algorithm to add 3 (+3 units) in all even numbers and to add 2 (+2 units)
in all odd indices in the first 1/5th elements of the given n integer list.
-----------------------------------------------------------------------------------------------
BRUTE FORCE:
alter(Arr[1.....n])

  fifth = n / 5
  for i: 1.....fifth
    if Arr[i] mod 2 == 0
        Arr[i] =  Arr[i] + 3
    if i mod 2 == 1
        Arr[i] = Arr[i] + 2

-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:                               recurrence relation: T(n) = T(n/2) + T(n/2) +  1
                                                                            =  2T(n/2) + 1
void alter(Arr[1.....n], p, r)                             
  if p==r
    if Arr[p] mod 2 == 0
        Arr[p] =  Arr[p] + 3
    if p mod 2 == 1
        Arr[p] = Arr[p] + 2
  else
    mid = floor((p + r)/2)
    alter(Arr[1..n], p, mid)
    alter(Arr[1..n], mid+1, r)

fifth = floor((start + end)/ 5)
function call <--- alter(Arr[1..n], start, fifth)

##############################################################################################

Part B: Design an algorithm to take sum of ‘n’ integers given that we want our linear
structure (list/array) to be divided into three parts instead of two parts at each recursive
step. You need to change the base condition(s) carefully
-----------------------------------------------------------------------------------------------
BRUTE FORCE:
returnValue calcSum(Temp[1...n])
for i: 1......n
  total = total + Temp[i]
return total

-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:
returnValue calcSum (Temp[1...n], p, r )
                                                recurrence relation: T(n) = T(n/3) + T(n/3) + T(n/3) +  1
                                                                          =  3T(n/3) + 1
  if (p==r)
    return Temp[r]      
  else if (p== r-1)
    return Temp[r] + Temp[p]
  
  else

  mid1 = floor (( p + (r-p) )/3)      
  mid2 = floor (( p + 2 * (r-p) )/3)     

  chunk1 <-- calcSum(Temp,p,mid1)
  chunk2 <-- calcSum(Temp,mid1+1,mid2)
  chunk3 <-- calcSum(Temp,mid2+1,r)

  return chunk1+chunk2+chunk3

##############################################################################################

Part C: Consider a sorted list which is sorted in ascending-order. This list can only have
multiple occurrences of A’s, B’s and C’s. Design an algorithm to count the total number of
B’s in this sorted list. Make it intelligent by using its sorted order. Note: It is possible that
the list has only A’s or only B’s or only C’s. It is also possible that list have no A’s or no B’s or
no C’s
-----------------------------------------------------------------------------------------------
BRUTE FORCE:
returnValue countB(Arr[1.....n], b)
freq <-- 0
  for i: 1.......n
    if (Arr[i] == b)
      freq++
return freq
-----------------------------------------------------------------------------------------------
INTELLIGENT:
returnValue countB(Arr[1.....n], b)
freq <-- 0
   for i: 1........n
     if (Arr[i] == b)
         freq++
     else if ( b < T[i] )
        return freq

return freq
-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:                              recurrence relation: T(n) = T(n/2) + T(n/2) +  1
                                                                          =  2T(n/2) + 1
returnValue countB(Arr[1.....n], b, p, r)
if (p==r and Arr[p] == b)
  return 1
else if (p==r AND Arr[p] != b)
  return 0
if (Arr[p] == b and Arr[r] == b)
   return r-p+1                   # all B's (sub list or full list)
if (Arr[r] < b)
  return 0                        # all A's
if (Arr[p] > b)
  return 0                        # all C's
else
  mid = floor((p+r) /2)
  count1 <-- countB(Arr[1.....n], b, p, mid)
  count2 <-- countB(Arr[1.....n], b, mid+1, r)
return count1 + count2

##############################################################################################

Part D: Consider that you will be given a list of size in powers of 2. (e.g. 2,4,8,16 … etc.) You
have to swap the consecutive elements in such a way that first element should be swapped
with its immediate neighbor element and so on.
-----------------------------------------------------------------------------------------------
2,4,8,16
4,2,8,16
4,8,2,16
4,8,16,2
BRUTE FORCE:

void swap(Arr[1........n])

for i: 1......n-1
  temp <-- arr[i]
  arr[i] <-- arr[i+1]
  arr[i+1] <-- temp

-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:
2,4,               8,16*
p=1     q=2            r= 4

2        4*
p=1     r=2
                                                      recurrence relation: T(n) = T(n/2) + T(n/2) +  1
void swap(Arr[1........n], p, r)                                                =  2T(n/2) + 1
  if p == r
    arr[p], arr[p + 1] <-- arr[p + 1], arr[p]
  else:
    mid = floor(p + r / 2)
    swap(Arr[1.....n], p, mid)
    swap(Arr[1.....n], mid+1, r)

##############################################################################################

Part E: Consider that you have two arrays of positive integers T and Z. Write a program
that compares the content of the two arrays and returns ‘true’ if the content of both arrays
is the same and return ‘false’ otherwise.
-----------------------------------------------------------------------------------------------
BRUTE FORCE:
returnValue duplicate(T[1.....n], Z[1.....n])
if T(n) != Z(n):
    return False
for i: 1....n
  if T[i] != Z[i]
    return false
  return true

-----------------------------------------------------------------------------------------------
DIVIDE AND CONQUER:                                     recurrence relation: T(n) = T(n/2) + T(n/2) +  1
returnValue duplicate(T[1.....n], Z[1.....n], p, r)                               = 2T(n/2) + 1
    if T(n) != Z(n)
        return false
    if p == r
        if T[p] != Z[p]
            return false
        else
            return true
    else
        mid = floor((p+r) / 2)  
        left_duplicate = duplicate(T[1.....n], Z[1.....n], p, mid)
        right_duplicate = duplicate(T[1.....n], Z[1.....n], mid+1, r)
        return left_duplicate AND right_duplicate
